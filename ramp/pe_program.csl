param memcpy_params: comptime_struct;
param M: i16;

// Colors
param send_color: color;

// Task IDs
param exit_task_id: local_task_id;
param send_recv_task_id: local_task_id;

const sys_mod = @import_module("<memcpy/memcpy>", memcpy_params);

// timestamp
const timestamp = @import_module("<time>");
var tsc_start_buf = @zeros([timestamp.tsc_size_words]u16);
var tsc_end_buf = @zeros([timestamp.tsc_size_words]u16);

var timer_buf = @zeros([3]f32);
var timer_buf_ptr: [*]f32 = &timer_buf;

var x: [M]f32;
var y: [M]f32;

var x_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{M} -> x[i] });
var y_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{M} -> y[i] });

var x_ptr: [*]f32 = &x;
var y_ptr: [*]f32 = &y;

// Compute gemv
fn launch() void {
  // warmup
  for (@range(i16, 10000)) |i| {
    @fadds(y_dsd, y_dsd, 1.0);
  }
  @activate(send_recv_task_id);
}

task send_recv_task() void {

  timestamp.enable_tsc();
  timestamp.get_timestamp(&tsc_start_buf);

  const out_dsd = @get_dsd(fabout_dsd, .{
                    .fabric_color = send_color, .extent = M,
                    .output_queue = @get_output_queue(3)
                  });
  @fmovs(out_dsd, x_dsd, .{ .async = true });

  const in_dsd = @get_dsd(fabin_dsd, .{
                   .fabric_color = send_color, .extent = M,
                   .input_queue = @get_input_queue(4)
                 });
  @fmovs(y_dsd, in_dsd, .{ .async = true, .activate = exit_task_id });
}

task exit_task() void {
  timestamp.get_timestamp(&tsc_end_buf);
  timestamp.disable_tsc();

  var lo_: u16 = 0;
  var hi_: u16 = 0;
  var word: u32 = 0;

  lo_ = tsc_start_buf[0];
  hi_ = tsc_start_buf[1];
  timer_buf[0] = @bitcast(f32, (@as(u32,hi_) << @as(u16,16)) | @as(u32, lo_) );

  lo_ = tsc_start_buf[2];
  hi_ = tsc_end_buf[0];
  timer_buf[1] = @bitcast(f32, (@as(u32,hi_) << @as(u16,16)) | @as(u32, lo_) );

  lo_ = tsc_end_buf[1];
  hi_ = tsc_end_buf[2];
  timer_buf[2] = @bitcast(f32, (@as(u32,hi_) << @as(u16,16)) | @as(u32, lo_) );

  sys_mod.unblock_cmd_stream();
}

comptime {
  // When exit_task_id is activated, exit_task will execute
  @bind_local_task(exit_task, exit_task_id);
  @bind_local_task(send_recv_task, send_recv_task_id);

  @export_symbol(x_ptr, "x");
  @export_symbol(y_ptr, "y");
  @export_symbol(timer_buf_ptr, "timer_buf");
  @export_symbol(launch);
  @rpc(@get_data_task_id(sys_mod.LAUNCH));
}
